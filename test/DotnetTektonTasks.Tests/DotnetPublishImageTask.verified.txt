# Source: task-dotnet/templates/dotnet-publish-image.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: dotnet-publish-image
  labels:
    app.kubernetes.io/version: 0.1.0
  annotations:
    artifacthub.io/category: integration-delivery
    artifacthub.io/maintainers: |
      - name: Red Hat
        email: dotnet-team@redhat.com
    artifacthub.io/provider: Red Hat
    artifacthub.io/recommendations: |
      - url: https://tekton.dev/
    tekton.dev/categories: .NET
    tekton.dev/pipelines.minVersion: 0.41.0
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le,linux/arm64
    tekton.dev/tags: dotnet
    tekton.dev/displayName: "dotnet publish image"
spec:
  description: >-
    dotnet-publish-image task builds a container image from a .NET project
    and pushes it to a container registry.
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image.
    - name: IMAGE
      description: Fully qualified image name with digest.
  params: 
    - name: PROJECT
      description: Path of the .NET project file.
      type: string
    - name: IMAGE_NAME
      description: |
        Name of the image repository to push. When it does not include a registry, it is pushed to the internal cluster registry.
        If no namespace is included, the current namespace is prepended to the name.
      type: string
    - name: SDK_VERSION
      default: latest
      description: Tag of .NET SDK imagestream.
      type: string
    - name: DOTNET_NAMESPACE
      description: Namespace of the .NET imagestreams. Set to '$(context.taskRun.namespace)' to use the pipeline namespace.
      default: openshift
      type: string
    - name: USE_DOTNET_IMAGESTREAM_BASE_IMAGES
      description: Set to 'true' to build the application image using .NET imagestream base images.
      default: "true"
      type: string
    - name: VERBOSITY
      description: MSBuild verbosity level. Allowed values are 'q[uiet]', 'm[inimal]', 'n[ormal]', 'd[etailed]', and 'diag[nostic]'.
      default: "minimal"
      type: string
    - name: BUILD_PROPS
      type: array
      description: MSBuild properties to pass to the publish command.
      default: []
    - name: ENV_VARS
      type: array
      description: Environment variables.
      default: []
    
  workspaces:  
    - name: source
      mountPath: /workspace/source
    - name: dockerconfig
      description: >-
        An optional workspace that allows providing a .docker/config.json file to access the container registry.
        The file should be placed at the root of the Workspace with name config.json or .dockerconfigjson.
      optional: true
    
  steps:
    - name: publish-image
      image: image-registry.openshift-image-registry.svc:5000/$(params.DOTNET_NAMESPACE)/dotnet:$(params.SDK_VERSION)
      args:
        - "--env-vars"
        - "$(params.ENV_VARS[*])"
        - "--build-props"
        - "$(params.BUILD_PROPS[*])"
      env:    
        - name: OpenShiftInternalRegistry
          value: "image-registry.openshift-image-registry.svc:5000"
        - name: OpenShiftDotnetNamespace
          value: $(params.DOTNET_NAMESPACE)
        - name: OpenShiftCurrentNamespace
          value: $(context.taskRun.namespace)
        - name: RunningInTekton
          value: "true"
        - name: WORKSPACE_SOURCE_BOUND
          value: $(workspaces.source.bound)
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
        - name: WORKSPACE_DOCKERCONFIG_BOUND
          value: $(workspaces.dockerconfig.bound)
        - name: WORKSPACE_DOCKERCONFIG_PATH
          value: $(workspaces.dockerconfig.path)
        - name: PARAM_PROJECT
          value: $(params.PROJECT)
        - name: PARAM_IMAGE_NAME
          value: $(params.IMAGE_NAME)
        - name: PARAM_USE_DOTNET_IMAGESTREAM_BASE_IMAGES
          value: $(params.USE_DOTNET_IMAGESTREAM_BASE_IMAGES)
        - name: PARAM_VERBOSITY
          value: $(params.VERBOSITY)
        
      script: |
        #!/usr/bin/env bash
        
        set -euo pipefail
        
        declare -a PARAM_BUILD_PROPS
        parsing_flag=""
        for arg in "$@"; do
          if [[ "$arg" == "--env-vars" ]] || [[ "$arg" == "--build-props" ]]; then
            parsing_flag="${arg:2}"
          elif [[ "$parsing_flag" == "env-vars" ]]; then
            export "${arg?}"
          elif [[ "$parsing_flag" == "build-props" ]]; then
            if [[ "$arg" == *\;* ]] && [[ "$arg" != *=\"*\" ]]; then
              echo "Invalid BUILD_PROPS property: '""$arg""'." >&2
              echo "To assign a list of values, the values must be enclosed with double quotes. For example: MyProperty=\"Value1;Value2\"." >&2
              exit 1
            fi
            PARAM_BUILD_PROPS+=("$arg")
          fi
        done
        
        if [[ "$WORKSPACE_DOCKERCONFIG_BOUND" == "true" ]]; then
          mkdir -p ~/.config/containers
          [[ -f "$WORKSPACE_DOCKERCONFIG_PATH/config.json" ]] && [[ -f "$WORKSPACE_DOCKERCONFIG_PATH/.dockerconfigjson" ]] && \
            echo "error: 'dockerconfig' workspace provides multiple config files." >&2 && \
            exit 1
          [[ -f "$WORKSPACE_DOCKERCONFIG_PATH/config.json" ]] && ln -s "$WORKSPACE_DOCKERCONFIG_PATH/config.json" ~/.config/containers/auth.json
          [[ -f "$WORKSPACE_DOCKERCONFIG_PATH/.dockerconfigjson" ]] && ln -s "$WORKSPACE_DOCKERCONFIG_PATH/.dockerconfigjson" ~/.config/containers/auth.json
        fi
        
        if [[ "$WORKSPACE_SOURCE_BOUND" == "true" ]]; then
          cd "$WORKSPACE_SOURCE_PATH"
        else
          mkdir -p ~/src
          cd ~/src
        fi
        
        # Support short names for pushing to the internal registry.
        IMAGE_NAME="$PARAM_IMAGE_NAME"
        # If the name includes no repository, use the OpenShift internal repository.
        if [[ "${IMAGE_NAME%%/*}" != *.* ]]; then
          # If the name has no path component, use the current namespace.
          if [[ "$IMAGE_NAME" != */* ]]; then
          IMAGE_NAME="$OpenShiftCurrentNamespace/$IMAGE_NAME"
          fi
          IMAGE_NAME="$OpenShiftInternalRegistry/$IMAGE_NAME"
        fi
        
        # Determine properties used by the .NET SDK container tooling.
        # Extract the repository
        ContainerRegistry="${IMAGE_NAME%%/*}"
        ContainerRepository="${IMAGE_NAME#*/}"
        ContainerImageTag="latest"
        # Extract the tag (if there is one)
        if [[ "$ContainerRepository" == *:* ]]; then
          ContainerImageTag="${ContainerRepository##*:}"
          ContainerRepository="${ContainerRepository%:*}"
        fi
        
        if [[ "$PARAM_USE_DOTNET_IMAGESTREAM_BASE_IMAGES" == "true" ]]; then
        cat >/tmp/UseDotnetImageStreamBaseImages.targets <<'EOF'
        <Project>
          <Target Name="ComputeOpenShiftContainerBaseImage" BeforeTargets="ComputeContainerBaseImage">
            <PropertyGroup>
              <ContainerBaseImage>$(OpenShiftInternalRegistry)/$(OpenShiftDotnetNamespace)/dotnet-runtime:$(_TargetFrameworkVersionWithoutV)</ContainerBaseImage>
            </PropertyGroup>
          </Target>
        </Project>
        EOF
        fi
        
        declare -a PUBLISH_ARGS
        PUBLISH_ARGS+=( "${PARAM_BUILD_PROPS[@]/#/-p:}" )
        PUBLISH_ARGS+=( "--getProperty:GeneratedContainerDigest" "--getResultOutputFile:/tmp/IMAGE_DIGEST" )
        PUBLISH_ARGS+=( "-v" "$PARAM_VERBOSITY" )
        PUBLISH_ARGS+=( "-p:ContainerRegistry=$ContainerRegistry" "-p:ContainerRepository=$ContainerRepository" -p:ContainerImageTag= "-p:ContainerImageTags=$ContainerImageTag" )
        if [[ "$PARAM_USE_DOTNET_IMAGESTREAM_BASE_IMAGES" == "true" ]]; then
          PUBLISH_ARGS+=( "-p:CustomBeforeDirectoryBuildProps=/tmp/UseDotnetImageStreamBaseImages.targets" )
        fi
        PUBLISH_ARGS+=( "/t:PublishContainer" )
        PUBLISH_ARGS+=( "$PARAM_PROJECT" )
        dotnet publish  "${PUBLISH_ARGS[@]}"
        
        RESULT_IMAGE_DIGEST=$(cat /tmp/IMAGE_DIGEST)
        RESULT_IMAGE="$ContainerRegistry/$ContainerRepository@$RESULT_IMAGE_DIGEST"
        
        printf "%s" "$RESULT_IMAGE_DIGEST" >/tekton/results/IMAGE_DIGEST
        printf "%s" "$RESULT_IMAGE" >/tekton/results/IMAGE
